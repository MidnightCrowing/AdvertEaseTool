## OpenCV
#set(OpenCV_DIR D:/opencv-4.9.0/build_mingw64/install)
#find_package(OpenCV REQUIRED)

# Yaml
set(yaml-cpp_DIR D:/vcpkg/installed/x64-mingw-dynamic/share/yaml-cpp)
find_package(yaml-cpp CONFIG REQUIRED)

# Qt
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets LinguistTools)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets LinguistTools)

set(TS_FILES gui/resource/AdvertEaseTool_zh_CN.ts)

set(PROJECT_SOURCES
        gui/src/main.cpp
        gui/src/mainwindow.cpp
        gui/include/mainwindow.h
        gui/src/device_control.cpp
        gui/include/device_control.h
        gui/src/add_device.cpp
        gui/include/add_device.h
        gui/src/get_devices.cpp
        gui/include/get_devices.h
        gui/src/mainwidget.cpp
        gui/include/mainwidget.h
        gui/src/run.cpp
        gui/include/run.h
        gui/src/utils.cpp
        gui/include/utils.h
        gui/ui/mainwindow.ui
        ${TS_FILES}
)

if (${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(AdvertEaseTool
            MANUAL_FINALIZATION
            ${PROJECT_SOURCES}
            gui/resource/resource.qrc
            gui/logo.rc
    )
    # Define target properties for Android with Qt 6 as:
    #    set_property(TARGET gui APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
    #                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
    # For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation

    qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
else ()
    if (ANDROID)
        add_library(AdvertEaseTool SHARED
                ${PROJECT_SOURCES}
        )
        # Define properties for Android with Qt 5 after find_package() calls as:
        #    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else ()
        add_executable(AdvertEaseTool
                ${PROJECT_SOURCES}
        )
    endif ()

    qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
endif ()

target_link_libraries(AdvertEaseTool
        PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
        ${OpenCV_LIBS}
        ${OnnxRuntime_LIBS}
        yaml-cpp::yaml-cpp   # 这里的顺序不要改, 编译会报错
        onnx_mark_model
        onnx_decision_model
)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if (${QT_VERSION} VERSION_LESS 6.1.0)
    set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.gui)
endif ()
set_target_properties(AdvertEaseTool PROPERTIES
        ${BUNDLE_ID_OPTION}
        MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
        MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
        MACOSX_BUNDLE TRUE
        WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS AdvertEaseTool
        BUNDLE DESTINATION .
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if (QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(AdvertEaseTool)
endif ()
